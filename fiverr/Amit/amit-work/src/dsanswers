Q1:
1. Queue
2. Stack
3. Queue
4. Stack
5. Stack

Q2:
Front(): Retrieve the next element in the queue
Back(): Retrieve the last element
Enqueue(): Pushes a new element into the end of the queue
Dequeue(): Removes the next queued element

Q3:
Part A:
A queue is a FIFO (first in first out) datastructure. Elements are dequeued in the order in which they were enqueued.
A priority queue provides constant time lookup of the largest or smallest element. It stores its data in a binary heap. Removing an element from the heap involves removing the largest (or smallest) element, then internally "heapifying" until the next priority element is set.
Part B:
Taking a pile of homework and starting on the ones that are due eariler than the others. Completing a homework involves removing it from the heap.

Q4:
A)
int Arr[6] = {};
int front = -1, back = -1;
B)
Arr = {12}
front = 0, back = 0
C)
Arr = {12, -3}
front = 0, back = 1
D)
Arr = {12, -3, 48}
front = 0, back = 2
E)
Arr = {12, -3, 48}
front = 1, back = 2
F)
public boolean isFull() {
  return back >= 0 && front == back;
}

Q5:
O(1), O(log^2(n)), O(n), O(n^2)

Q6:
c = 3, N = 20

Q7:
A) 8 19 7 10 -1 14 
B) 7 8 19 10 -1 14 
C) 7 8 10 19 -1 14 
D) -1 7 8 10 19 14

Q8:
A) -1 19 7 10 8 14 
B) -1 7 19 10 8 14 
C) -1 7 8 10 19 14 
D) -1 7 8 10 19 14

Q9:
Merge sort is used to combine two sorted arrays into sorted order. In this case Ar holds the two subarrays represented by [first, mid], and (mid, last]. Merge() is typically used by the MergeSort() routine.

Q10:
A) 5 9 8 10 -1 14 
B) 5 8 9 10 -1 14
C) 5 8 9 -1 10 14 

Q11:
Let m = a.length
The number of iterations of the inner loop for every iteration of the outer loop:
m + (m - 1) + (m - 2) + (m - 3) + ... + 1 + 0
Can be written as:
sum_{i = 0}^m m
Which has a sum identity of 1/2 * (m*(m+1)
Which is less than 2m^2 for all m > 10
Therefore the loop runs in O(m^2) time.

Q11:
Part a)
1) The root node has three children, which violates the BST contract.
2) Node 23 is greater than the node to its left, and greater than the ones to its right, which violates the BST contract.

Part b)
Height = 4
Level = 4
Descendants = {23,30,7,88,12,55,14,4,22}

Part c)
public class Node {
  int data;
  Node next;
}

Part d)
[see Q11D.jpg]

Q12:
a) [see Q12A.jpg]
b) [see Q12B.jpg]
c) [see Q12C.jpg]
d)
 1: [see Q12d.jpg]
 2: [see Q12d.jpg]

Q13:
post order = {10, 19, 18, 33, 30, 45, 44, 22}
in order = {10, 18, 19, 22, 30, 33, 44, 45}
pre order = {22, 18, 10, 19, 44, 30, 33, 45}


